@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	var listBehaviour = Model.Item.GetRawValueString("ListBehaviour", "all");
	string articleListSortOrder = !string.IsNullOrEmpty(Model.Item.GetString("ArticleListSortOrder")) ? Model.Item.GetString("ArticleListSortOrder") : "Descending";
	int maxItemsInList = !string.IsNullOrEmpty(Model.Item.GetInt32("MaxItemsInList").ToString()) ? Model.Item.GetInt32("MaxItemsInList") : 10;
	string articleListLayout = !string.IsNullOrEmpty(Model.Item.GetString("ArticleListLayout")) ? Model.Item.GetString("ArticleListLayout") : "grid";
	string columnTheme = !string.IsNullOrEmpty(Model.Item.GetString("ColumnTheme")) ? Model.Item.GetString("ColumnTheme") : string.Empty;
	string columnThemeClass = columnTheme != string.Empty ? " theme " + columnTheme + " p-3" + (articleListLayout == "carousel" ? " px-lg-4" : string.Empty) : string.Empty;
	
	<div class="h-100@(columnThemeClass) item_@Model.Item.SystemName.ToLower()">

	@switch (articleListLayout)
	{
		case "grid":

			{
				if (listBehaviour != "lists") { @RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder) }
				if (listBehaviour != "articles") { @RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder) }
			}
			
			break;

		case "carousel":
			var carouselSettings = Model.Item.GetRawValueString("CarouselSettings", "4");
			string slidesPerPage = $"slider-item-show{carouselSettings}";
			string navigationStyle = $"{Model.Item.GetRawValueString("NavigationStyle", "slider-nav-round")}";
			string navigationPlacement = $"{Model.Item.GetRawValueString("NavigationPlacement", "slider-nav-on-slides")}";
			string indicatorStyle = $"{Model.Item.GetRawValueString("IndicatorStyle", string.Empty)}";
			string revealSlides = Model.Item.GetRawValueString("RevealSlides", "reveal") == "reveal" ? "slider-item-reveal" : string.Empty;
			string sliderItemsGap = Model.Item.GetRawValueString("SliderItemsGap", "slider-item-gap") == "slider-item-nogap" ? "slider-item-nogap" : string.Empty;
			string navigationAlwaysVisible = (Model.Item.GetBoolean("NavigationAlwaysVisible")) ? "slider-nav-visible" : string.Empty;
			string navigationVisibleOnTouch = (Model.Item.GetBoolean("NavigationVisibleOnTouch")) ? "slider-nav-touch" : string.Empty;
			string navigationShowScrollbar = (Model.Item.GetBoolean("NavigationShowScrollbar")) ? "slider-nav-scrollbar" : string.Empty;
			string scrollBarForceMobile = (Model.Item.GetBoolean("NavigationShowScrollbar")) ? "--swiffy-slider-track-height:0.5rem !important;" : string.Empty;
			string navigationSmall = (Model.Item.GetBoolean("NavigationSmall")) ? "slider-nav-sm" : string.Empty;
			string navigationInvertColors = (Model.Item.GetBoolean("NavigationInvertColors")) ? "slider-nav-dark" : string.Empty;
			string navigationSlideEntirePage = (Model.Item.GetBoolean("NavigationSlideEntirePage")) ? "slider-nav-page" : string.Empty;
			string navigationNoLoop = (Model.Item.GetBoolean("NavigationNoLoop")) ? "slider-nav-noloop" : string.Empty;
			string indicatorsOutsideSlider = (Model.Item.GetBoolean("IndicatorsOutsideSlider") && indicatorStyle != string.Empty) ? "slider-indicators-outside" : string.Empty;
			string indicatorsHighlightActive = (Model.Item.GetBoolean("IndicatorsHighlightActive")) ? "slider-indicators-highlight" : string.Empty;
			string indicatorsInvertColors = (Model.Item.GetBoolean("IndicatorsInvertedColors")) ? "slider-indicators-dark" : string.Empty;
			string indicatorsVisibleOnSmallDevices = (Model.Item.GetBoolean("IndicatorsVisibleOnSmallDevices")) ? "slider-indicators-sm" : string.Empty;
			string animation = Model.Item.GetRawValueString("Animation", string.Empty) != string.Empty ? $"slider-nav-animation {Model.Item.GetRawValueString("Animation")}" : string.Empty;
			string autoplay = (Model.Item.GetBoolean("Autoplay")) ? "slider-nav-autoplay" : string.Empty;
			string autoplayInterval = Model.Item.GetRawValueString("AutoplayInterval", string.Empty);
			bool hideSliderNavigation = false;

			if(navigationStyle == "slider-nav-none")
			{
				hideSliderNavigation = true;
			}
			
			<div id="Slider_@Model.ID" class="swiffy-slider @(slidesPerPage) @(navigationStyle) @(revealSlides) @(navigationPlacement) @(navigationAlwaysVisible) @(navigationVisibleOnTouch) @(sliderItemsGap) @(indicatorStyle) @(navigationShowScrollbar) @(navigationSmall) @(navigationInvertColors) @(indicatorsOutsideSlider) @(navigationNoLoop) @(indicatorsHighlightActive) @(indicatorsInvertColors) @(indicatorsVisibleOnSmallDevices) @(navigationSlideEntirePage) @(animation) @(autoplay) item_@Model.Item.SystemName.ToLower()" style="--swiffy-slider-nav-light:var(--swift-foreground-color);--swiffy-slider-nav-dark:var(--swift-background-color);visibility:hidden;opacity:0;@(scrollBarForceMobile)" data-slider-nav-autoplay-interval="@(autoplayInterval)">
				<div class="slider-container pb-3 py-lg-3 mt-lg-n3">
					@{
						if (listBehaviour != "lists") { @RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder) }
						if (listBehaviour != "articles"){ @RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder) }
					}
				</div>

				@if(!hideSliderNavigation)
				{
					<button type="button" title="@Translate("Previous slide")" class="slider-nav" style="z-index:1;">
						<span class="visually-hidden">@Translate("Previous slide")</span>
					</button>
					<button type="button" title="@Translate("Next slide")" class="slider-nav slider-nav-next" style="z-index:1;">
						<span class="visually-hidden">@Translate("Next slide")</span>
					</button>
				}
				@if (indicatorStyle != "slider-indicators-hidden")
				{
					<div class="slider-indicators" style="z-index:1;">
						@{
							string isActive = "active";
							int slideCount = 1;
						}
						@for (int i = 0; i < maxItemsInList; i++)
						{
							<button class="@isActive" type="button" title='@Translate("Go to slide") @slideCount'>
								<span class="visually-hidden">@Translate("Go to slide") @slideCount</span>
							</button>

							slideCount++;
							isActive = null;
						}
					</div>
				}

				<script type="module" src="/Files/Templates/Designs/Swift/Assets/js/swiffy-slider.js"></script>
				<script type="module">
					swift.AssetLoader.Load('/Files/Templates/Designs/Swift/Assets/css/swiffy-slider.min.css', 'css');
					document.addEventListener('load.swift.assetloader', () => {
						swiffyslider.initSlider(document.querySelector('#Slider_@Model.ID'));
						document.querySelector('#Slider_@Model.ID').style.opacity = 1;
						document.querySelector('#Slider_@Model.ID').style.visibility = "visible";
					});
				</script>
			</div>

			break;
	}
	</div>
}

@helper RenderArticleList(string itemType, string listSource, int maxItemsInList, string articleListSortOrder)
{
	var parent = Dynamicweb.Context.Current.Request.QueryString.Get("list");
	var query = string.IsNullOrEmpty(parent) ? listSource : parent;
	var includeAllChildren = Model.Item.GetRawValueString("ListDepth", "all") == "all" ? true : false;
	
	@RenderItemList(new
	{
		ItemType = itemType,
		ListTemplate = "ItemPublisher/List/List.cshtml",
		ItemFieldsList = "*",
		ListSourceType = "Page",
		ListSourcePage = query,
		ListPageSize = maxItemsInList,
		IncludeParagraphItems = true,
		ListOrderBy = "PublishedDate",
		ListSecondOrderBy = "Updated",
		ListOrderByDirection = articleListSortOrder,
		IncludeAllChildItems = includeAllChildren
	})
}
