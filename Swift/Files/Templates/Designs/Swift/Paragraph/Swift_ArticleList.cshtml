@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string listSource = !string.IsNullOrEmpty(Model.Item.GetString("ListSource")) ? Model.Item.GetString("ListSource") : Model.PageID.ToString();
	var listBehaviour = Model.Item.GetRawValueString("ListBehaviour", "all");
	string articleListSortOrder = !string.IsNullOrEmpty(Model.Item.GetString("ArticleListSortOrder")) ? Model.Item.GetString("ArticleListSortOrder") : "Descending";
	int maxItemsInList = !string.IsNullOrEmpty(Model.Item.GetInt32("MaxItemsInList").ToString()) ? Model.Item.GetInt32("MaxItemsInList") : 10;
	string articleListLayout = !string.IsNullOrEmpty(Model.Item.GetString("ArticleListLayout")) ? Model.Item.GetString("ArticleListLayout") : "grid";
	string columnTheme = !string.IsNullOrEmpty(Model.Item.GetString("ColumnTheme")) ? Model.Item.GetString("ColumnTheme") : string.Empty;
	string columnThemeClass = columnTheme != string.Empty ? " theme " + columnTheme + " p-3" + (articleListLayout == "carousel" ? " px-lg-4" : string.Empty) : string.Empty;
	int gridSettings = !string.IsNullOrEmpty(Model.Item.GetInt32("GridSettings").ToString()) ? Model.Item.GetInt32("GridSettings") : 4;
	string carouselSettings = Model.Item.GetRawValueString("CarouselSettings", "4");
	bool hideScrollbar = Model.Item.GetBoolean("HideScrollbar");
	string scrollbarClass = hideScrollbar == false ? " slider-nav-scrollbar" : string.Empty;
	
	<div class="h-100@(columnThemeClass) item_@Model.Item.SystemName.ToLower()">
	
	@switch (articleListLayout)
	{
		case "grid":

			{
				if (listBehaviour != "lists") { @RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder) }
				if (listBehaviour != "articles") { @RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder) }
			}
			
			break;

		case "carousel":
			
			<div class="swiffy-slider slider-item-show@(carouselSettings) slider-item-reveal slider-nav-round slider-item-nosnap swiffy-gap-lg-4">
				<div class="slider-container pb-3 py-lg-3 mt-lg-n3@(scrollbarClass)">
					@{
						if (listBehaviour != "lists") { @RenderArticleList("Swift_Article", listSource, maxItemsInList, articleListSortOrder) }
						if (listBehaviour != "articles") { @RenderArticleList("Swift_ArticleListPage", listSource, maxItemsInList, articleListSortOrder) }
					}
				</div>

				<button type="button" title="@Translate("Previous slide")" class="slider-nav"></button>
				<button type="button" title="@Translate("Next slide")" class="slider-nav slider-nav-next"></button>

				<script type="module" src="/Files/Templates/Designs/Swift/Assets/js/swiffy-slider.js"></script>
				<script type="module">
					swift.AssetLoader.Load('Files/Templates/Designs/Swift/Assets/css/swiffy-slider.min.css', 'css');
					document.addEventListener('load.swift.assetloader', function () {
						swiffyslider.init()
					});
				</script>
			</div>

			break;
	}
	</div>
}

@helper RenderArticleList(string itemType, string listSource, int maxItemsInList, string articleListSortOrder)
{
	var parent = Dynamicweb.Context.Current.Request.QueryString.Get("list");
	var query = string.IsNullOrEmpty(parent) ? listSource : parent;
	var includeAllChildren = Model.Item.GetRawValueString("ListDepth", "all") == "all" ? true : false;
	
	@RenderItemList(new
	{
		ItemType = itemType,
		ListTemplate = "ItemPublisher/List/List.cshtml",
		ItemFieldsList = "*",
		ListSourceType = "Page",
		ListSourcePage = query,
		ListPageSize = maxItemsInList,
		IncludeParagraphItems = true,
		ListOrderBy = "PublishedDate",
		ListSecondOrderBy = "Updated",
		ListOrderByDirection = articleListSortOrder,
		IncludeAllChildItems = includeAllChildren
	})
}
